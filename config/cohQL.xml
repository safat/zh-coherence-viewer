<?xml version="1.0" encoding="UTF-8" ?>
<api language="SQL">
    <environment paramStartChar="(" paramEndChar=")" paramSeparator=", " terminal=";"/>
    <keywords>
        <keyword name="SELECT" type="constant">
            <desc>
                <![CDATA[
                <div color="#336699">Retrieving Data from the Cache</div><br>
                The SELECT statement is the basic building block of a query: it indicates that you want to retrieve data
                from the cache. The clause can take several forms, including simple and complex path expressions,
                key expressions, transformation functions, multiple expressions, and aggregate functions. The SELECT
                statement also supports the use of aliases.<br>
                The form of the SELECT statement is as follows:
                <pre>
SELECT (properties* aggregators* | * | alias)
FROM "cache-name" [[AS] alias]
[WHERE conditional-expression] [GROUP [BY] properties+]
                </pre>
                The asterisk (*) character represents the full object instead of subparts. It is not required to prefix
                a path with the cache-name. The FROM part of the SELECT statement targets the cache that forms the
                domain over which the query should draw its results. The cache-name is the name of an existing cache<br>
                <br><div color="#336699">Example:</div><br>
                1. Select all of the items from the cache dept.<br>
                <pre>select * from "dept"</pre>
                ]]>
            </desc>
        </keyword>
        <keyword name="WHERE" type="constant">
            <desc>
                <![CDATA[
                <div color="#336699">Filtering Entries in a Result Set</div><br>
                <p>Use the WHERE clause to filter the entries returned in a result set. One of the key features of CohQL
                is that they can use path expressions to navigate object structure during expression evaluation.
                Conditional expressions can use a combination of logical operators, comparison expressions, primitive
                and function operators on fields, and so on.</p>
                <p>In the literal syntax of the WHERE clause, use single quotes to enclose string literals; they can be
                escaped within a string by prefixing the quote with another single quote. Numeric expressions are
                defined according to the conventions of the Java programming language. Boolean values are represented
                by the literals TRUE and FALSE. Date literals are not supported.</p>
                <table width="100%">
                <tr>
                <td width="25px"></td>
                <td><hr>
                <b>Note:</b><br>
                CohQL does not have access to type information. This means that if a getter returns a numeric type
                different than the type of the literal, you may get a false where you would have expected a true on the
                comparison operators. The work around is to specify the type of the literal with l, for long, d for
                double, or s for short. The defaults are Integer for literals without a period (.) and Float for
                literals with a period (.).
                <hr></td>
                </tr>
                </table>
                Operator precedence within the WHERE clause is as follows:<br>
                <ol>
                <li> Path operator (.)
                <li> Unary + and -
                <li> Multiplication ( * ) and division (/ )
                <li> Addition ( + ) and subtraction ( - )
                <li> Comparison operators: =, >, >=, <, <=, <>, [ NOT ] BETWEEN, [ NOT ] LIKE, [ NOT ] IN, IS [ NOT ] NULL, CONTAINS [ ALL | ANY ]
                <li> Logical operators (AND, OR, NOT)
                </ol>
                <p>The WHERE clause supports only arithmetic at the language level.</p>
                The BETWEEN operator can be used in conditional expressions to determine whether the result of an
                expression falls within an inclusive range of values. Numeric, or string expressions can be evaluated in
                this way.<br>
                The form is: BETWEEN lower AND upper.
                <p>The LIKE operator can use the "_" and "%" wild-cards.</p>
                The IN operator can be used to check whether a single-valued path-expression is a member of a collection.
                The collection is defined as an inline-list or expressed as a bind variable. The syntax of an inline-list is:
                <pre>"(" literal* ")"</pre>
                <p>CONTAINS [ ALL | ANY ] are very useful operators because Coherence data models typically use
                de-normalized data. The CONTAINS operator can be used to determine if a many-valued path-expression
                contains a given value. For example:</p>
                <p>e.citys CONTAINS "Boston"</p>
                <p>The ALL and ANY forms of CONTAINS take a inline-list or bind-variable with the same syntax as the IN operator.</p>
                <br><div color="#336699">Example:</div><br>
                1. Select all of the items in the cache dept where the value of the deptno key equals 10.<br>
                <pre>select * from "dept" where deptno = 10</pre>
                ]]>
            </desc>
        </keyword>
        <keyword name="GROUP BY" type="constant">
            <desc>
                <![CDATA[
                <div color="#336699">Aggregating Query Results</div><br>
                <p>An aggregate query is a variation on the SELECT query. Use an aggregate query when you want to group
                results and apply aggregate functions to obtain summary information about the results. A query is
                considered an aggregate query if it uses an aggregate function or possesses a GROUP BY clause. The most
                typical form of an aggregate query involves the use of one or more grouping expressions followed by
                aggregate functions in the SELECT clause paired with the same lead grouping expressions in a GROUP BY
                clause.</p>
                <p>CohQL supports these aggregate functions: COUNT, AVG, MIN, MAX, and SUM.</p>
                <br><div color="#336699">Example:</div><br>
                1. Select the total amount and average price for items from the orders cache, grouped by supplier.<br>
                <pre>select supplier,sum(amount),avg(price) from "orders" group by supplier</pre>
                ]]>
            </desc>
        </keyword>
        <keyword name="sum" type="function"><params><param name="value"/></params></keyword>
        <keyword name="count" type="function"></keyword>
        <keyword name="avg" type="function"><params><param name="value"/></params></keyword>
        <keyword name="min" type="function"><params><param name="value"/></params></keyword>
        <keyword name="max" type="function"><params><param name="value"/></params></keyword>
        <keyword name="NOT" type="constant"/>
        <keyword name="BETWEEN" type="constant"/>
        <keyword name="LIKE" type="constant"/>
        <keyword name="IN" type="constant"/>
        <keyword name="IS NULL" type="constant"/>
        <keyword name="IS NOT NULL" type="constant"/>
        <keyword name="CONTAINS" type="constant"/>
        <keyword name="ALL" type="constant"/>
        <keyword name="ANY" type="constant"/>
        <keyword name="AND" type="constant"/>
        <keyword name="OR" type="constant"/>
        <keyword name="key" type="function">
            <desc>
                <![CDATA[
                <div color="#336699">Using Key and Value Pseudo-Functions</div><br>
                CohQL provides a key() pseudo-function because many users store objects with a key property. The key()
                represents the cache's key. The query syntax also provides a value() pseudo-function. The value() is
                implicit in chains that do not start with key(). The key() and value() pseudo-functions are typically
                used in WHERE clauses, where they test against the key or value of the cache entry.
                ]]>
            </desc>
        </keyword>
        <keyword name="value" type="function">
            <desc>
                <![CDATA[
                <div color="#336699">Using Key and Value Pseudo-Functions</div><br>
                CohQL provides a key() pseudo-function because many users store objects with a key property. The key()
                represents the cache's key. The query syntax also provides a value() pseudo-function. The value() is
                implicit in chains that do not start with key(). The key() and value() pseudo-functions are typically
                used in WHERE clauses, where they test against the key or value of the cache entry.
                ]]>
            </desc>
        </keyword>
        <keyword name="FROM" type="constant"/>
    </keywords>
</api>